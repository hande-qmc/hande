#include <stdio.h>
#include <unistd.h>

#if !defined(DET_SIZE)
#define DET_SIZE 32
#endif

#if !defined(POP_SIZE)
#define POP_SIZE 32
#endif

#if !defined(DSFMT_MEXP)
#define DSFMT_MEXP 19937
#endif

const char *report_hdf5();
const char *report_uuid();
const char *report_scalapack();
const char *report_single_precision();
const char *report_popcnt();
const char *report_mpi_toggle();
const char *report_omp_toggle();
const char *report_parallel();
typedef void (*HostWriter)(const char * message, int * io_unit);
void print_info(HostWriter writer, int * io_unit);

void print_info(HostWriter writer, int * io_unit) {
  writer("Version information\n", io_unit);
  writer("-------------------\n", io_unit);
  writer("Version       | @_git_describe@\n", io_unit);
  writer("Commit hash   | @_git_last_commit_hash@\n", io_unit);
  writer("Commit author | @_git_last_commit_author@\n", io_unit);
  writer("Commit date   | @_git_last_commit_date@\n", io_unit);
  writer("Branch        | @_git_branch@\n", io_unit);

  writer("\n", io_unit);
  writer("Configuration and build information\n", io_unit);
  writer("-----------------------------------\n", io_unit);
  writer("Who compiled             | @_user_name@\n", io_unit);
  writer("Compilation hostname     | @_host_name@\n", io_unit);
  writer("Operating system         | @_system@\n", io_unit);
  writer("CMake version            | @_cmake_version@\n", io_unit);
  writer("CMake generator          | @_cmake_generator@\n", io_unit);
  writer("Build type               | @_build_type@\n", io_unit);
  writer("Configuration time       | @_configuration_time@\n", io_unit);
  writer("Python version           | @_python_version@\n", io_unit);
  writer("Fortran compiler         | @_Fortran_compiler@\n", io_unit);
  writer("C compiler               | @_C_compiler@\n", io_unit);
  /* clang-format off */
  char buf[10000];
  snprintf(buf, sizeof(buf),
           "DET_SIZE set to          | %d\nPOP_SIZE set to          | %d\ndSFMT Mersenne exponent  | %d\n",
           @_det_size@, @_pop_size@, @_dsfmt_mexp@);
  writer(buf, io_unit);
  writer(report_mpi_toggle(), io_unit);
  writer(report_omp_toggle(), io_unit);
  writer("Lua version              | @_lua_version@\n", io_unit);
  writer("HDF5 library version     | @_hdf5_version@\n", io_unit);
  /* clang-format on */

  writer("\n", io_unit);
  writer("Further components\n", io_unit);
  writer("------------------\n", io_unit);
  writer(report_hdf5(), io_unit);
  writer(report_uuid(), io_unit);
  writer(report_parallel(), io_unit);
  writer(report_scalapack(), io_unit);
  writer(report_single_precision(), io_unit);
  writer(report_popcnt(), io_unit);

  writer("\n", io_unit);
  writer("Runtime information\n", io_unit);
  writer("-------------------\n", io_unit);
  char hostname[1024], hostname_report[10000];
  int stat = gethostname(hostname, 1024);
  if (stat == 0) {
    snprintf(hostname_report, sizeof(hostname_report), "Hostname:\n    %s\n", hostname);
  } else {
    snprintf(hostname_report, sizeof(hostname_report), "Hostname (truncated to 1024 characters):\n    %s\n", hostname);
  }
  writer(hostname_report, io_unit);

  char cwd[1024], cwd_report[10000];
  if (getcwd(cwd, sizeof(cwd)) != NULL) {
    snprintf(cwd_report, sizeof(cwd_report), "Current working dir:\n    %s\n", cwd);
    writer(cwd_report, io_unit);
  } else {
    perror("getcwd() error");
  }
}

const char *report_hdf5() {
/* clang-format off */
#ifdef DISABLE_HDF5
  return "DISABLE_HDF5 defined.  HDF5 disabled.\n";
#else
  return "DISABLE_HDF5 not defined.  HDF5 enabled.\n";
#endif
  /* clang-format on */
}

const char *report_uuid() {
  /* clang-format off */
#ifdef DISABLE_UUID
  return "DISABLE_UUID defined.  UUID disabled.\n";
#else
  return "DISABLE_UUID not defined.  UUID enabled.\n";
#endif
  /* clang-format on */
}

const char *report_scalapack() {
  /* clang-format off */
#ifdef DISABLE_SCALAPACK
  return "DISABLE_SCALAPACK defined.  ScaLAPACK disabled.\n";
#else
  return "DISABLE_SCALAPACK not defined.  ScaLAPACK enabled.\n";
#endif
  /* clang-format on */
}

const char *report_popcnt() {
  /* clang-format off */
#ifdef USE_POPCNT
  return "USE_POPCNT defined.  Fortran 2003 POPCNT procedure used.\n";
#else
  return "USE_POPCNT not defined. Internal POPCNT procedure used.\n";
#endif
  /* clang-format on */
}

const char *report_single_precision() {
  /* clang-format off */
#ifdef SINGLE_PRECISION
  return "SINGLE_PRECISION defined.  Single precision used where relevant.\n";
#else
  return "SINGLE_PRECISION not defined.  Double precision used throughout.\n";
#endif
  /* clang-format on */
}

const char *report_mpi_toggle() {
/* clang-format off */
#ifdef PARALLEL
  return "MPI parallelization      | ON\nMPI launcher             | @_mpi_launcher@\n";
#else
  return "MPI parallelization      | OFF\n";
#endif
  /* clang-format on */
}

const char *report_omp_toggle() {
/* clang-format off */
#ifdef _OPENMP
  return "OpenMP parallelization   | ON\n";
#else
  return "OpenMP parallelization   | OFF\n";
#endif
  /* clang-format on */
}

const char *report_parallel() {
/* clang-format off */
#ifdef PARALLEL
  return "PARALLEL defined.  MPI parallelization enabled.\n";
#else
  return "PARALLEL not defined.  MPI parallelization disabled.\n";
#endif
  /* clang-format on */
}


const char *report_mpi3() {
/* clang-format off */
#if ! defined PARALLEL
  return "PARALLEL not defined. MPI-3 functionality disabled";
#elif defined DISABLE_MPI3
  return "DISABLE_MPI3 defined.  MPI-3 functionality disabled.";
#else
  return "DISABLE_MPI3 not defined.  MPI-3 functionality enabled.";
#endif
  /* clang-format on */
}

const char *report_shmem() {
/* clang-format off */
#if ! defined PARALLEL
  return "PARALLEL not enabled. POSIX shared memory disabled.";
#elif ! defined DISABLE_MPI3 && defined ENABLE_SHMEM_POSIX
  return "ENABLE_SHMEM_POSIX defined.  POSIX shared memory enabled.";
#else
  return "ENABLE_SHMEM_POSIX not defined or MPI-3 in use.  POSIX shared memory disabled.";
#endif
  /* clang-format on */
}

